API REVIEW

Robert Steilberg | rhs16
Grayson Wise | gkw

Part 1

What about your API/design is intended to be flexible?

	The most flexible part of the design needs to be the game engine, as it could be given a variety of different types of data for a game, and it has to figure out a way to make them all readable in the same way for the game player. In addition, the game player needs to remain very flexible 
	
How is your API/design encapsulating your implementation decisions?

	Our API encapsulates our implementation decisions because it breaks everything down into very small parts. Each class handles one small aspect of the implementation, and they all work together. In this way, we make it as flexible as possible, because making changes to the program only requires focusing on changing one, or few, classes. 
	
How is your part linked to other parts of the project?

	I am working on the game player, which means I need to work with our game data team to make sure I know what I will be given and what to do with all of the date passed. For example, however the data team decides to store the information about the map directly impacts how I will have to implement uploading the map to the player window. This extends to all other aspects of the player, such as towers, money, enemies, etc... I will work with them constantly to make sure everything is passed in and displayed correctly.

What exceptions (error cases) might occur in your part and how will you handle them (or not, by throwing)?

	The most obvious error that could happen would be if someone uploads a file that is not the right file type for the game, or if it is incomplete. In those cases, I will display a pop up and return them to the original screen that they attempted to load the game from. This 

Why do you think your API/design is good (also define what your measure of good is)?

	I think our API is good because it breaks everything down into very small parts. Each class handles one small aspect of the implementation, and they all work together. I define good as being flexible and really well organized so that anyone looking at the API can easily understand what everything does. 


Part 2

What feature/design problem are you most excited to work on?

	I am most excited to work on the functionality of the utility. We have chosen to try to implement the feature allowing a user to set custom controls for the game, which I think is very interesting. This means that they could use any keys, or even external controllers, which would be a really cool feature to have. 

What feature/design problem are you most worried about working on?

	One of the features we hope to implement is being able to zoom and scroll around the map, which I think will be a very difficult challenge. I don't know what data structure the map will be passed in, but enlarging all of it, as well as the other sprites on the map, will be very difficult. 

What is do you plan to implement this weekend?

	I plan to meet up with the game data team and implement basic map showing, as well as work with the other game player people on the front end to make it possible to drag and drop towers onto the map.

Discuss the use cases/issues created for your pieces: are they descriptive, appropriate, and reasonably sized?

	Yes they are, because we spoke as a team beforehand and highlighted the importance of this. I wanted to make issues that were self-contained enough that I could implement all of the functionality myself, so as to keep making progress on my own. Some of the things I have built do interact heavily with other people's issues, but we were able to split them up into small enough pieces to make multiple issues. 

Do you have use cases for errors that might occur?

	I don't right now but as I finish adding features I will add and work on issues pertaining to making them more robust, which will include error catching. 